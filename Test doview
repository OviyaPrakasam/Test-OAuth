	public void doGetTCList(HttpServletRequest request, HttpServletResponse response) {
		logger.debug("doGetTCList-tcJsonValue---"+request.getParameter(TC_JSON_VALUE));
		logger.debug("doGetTCList-txnVersion --"+request.getParameter("tncVersion"));
		if ((request.getParameter("tncVersion") != null || StringUtils.isNotBlank(request.getParameter(TC_JSON_VALUE))) && StringUtils.isBlank((String)request.getSession().getAttribute(TC_JSON_VALUE))) {
			request.getSession().setAttribute(TC_JSON_VALUE, request.getParameter(TC_JSON_VALUE));
			request.getSession().setAttribute(TC_FLAG_ENABLE,CommonConstant.CONST_N);
			logger.debug("TermsCondition JSON value has been attached to session");
		}
	}

	@Test
	public void doGetTCList_Test() throws Exception {
		when(requestMock.getParameter("tcJsonValue")).thenReturn("tcJsonValue");
		when(requestMock.getSession().getAttribute(any())).thenReturn("tcJsonValue");
		landingPageController.doGetTCList(requestMock, responseMock);
	}

	@Test
	public void doGetTcListEmpty_Test() throws Exception {
		when(requestMock.getParameter("tcJsonValue")).thenReturn(" ");
		when(requestMock.getSession().getAttribute(any())).thenReturn(httpSessionMock);
		when(httpSessionMock.getAttribute(any())).thenReturn(CommonConstant.PAD_EMPTY);
		landingPageController.doGetTCList(requestMock, responseMock);
		verify(httpSessionMock).setAttribute("tcJsonValue", CommonConstant.PAD_EMPTY);
	}
