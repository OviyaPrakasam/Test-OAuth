//FXTD RTOB FLOW PILOT CHECK

			if(SysParamConstant.RTOB_FXTD_PILOT_ENABLE){
				boolean result= getSecurityService().isWhiteListUser(customerVO.getUserId(), customerVO.getCustomerEBID(), CommonConstant.PILOT_FUNCD_AO_RTOB);
				if(result){
					session.setAttribute("isAOTDRTOBEnabled", Boolean.TRUE);
				}else{
					session.setAttribute("isAOTDRTOBEnabled", Boolean.FALSE);
				}
			}else{
				session.setAttribute("isAOTDRTOBEnabled", Boolean.TRUE);
			}



//	CSD-DAC-CS2I - START

			if(SysParamConstant.IS_CSD_DAC_CS2I_ENABLE){
				if (SysParamConstant.IS_CSD_DAC_CS2I_PILOT_ENABLE) {
					boolean isWhiteListed = getSecurityService().isWhiteListUser(customerVO.getUserId(), customerVO.getCustomerEBID(), CommonConstant.PILOT_FUNCD_CSD_DAC_CS2I);
					if(isWhiteListed){
						session.setAttribute("isDACCS2IEnable", "true");
					}else{
						session.setAttribute("isDACCS2IEnable", "false");
					}
				} else {
					session.setAttribute("isDACCS2IEnable", "true");
				}
			}else{
				session.setAttribute("isDACCS2IEnable", "false");
			}
			

//PILOT FLAG - CCLI
			if ((SysParamConstant.IS_CCLI_ENABLE).equalsIgnoreCase(CommonConstant.PILOT_ENABLE) ){

				if ((SysParamConstant.IS_CCLI_PILOT_ENABLE)
						.equalsIgnoreCase(CommonConstant.PILOT_ENABLE)) {
					if (getSecurityService().isWhiteListUser(
							customerVO.getUserId(),
							customerVO.getCustomerEBID(),
							CommonConstant.PILOT_FUNCD_CCLI)) {
						session.setAttribute("isCcliPilotEnable", Boolean.TRUE);
					} else {
						session.setAttribute("isCcliPilotEnable", Boolean.FALSE);

					}
				} else {
					session.setAttribute("isCcliPilotEnable", Boolean.TRUE);

				}
			}else{
				session.setAttribute("isCcliPilotEnable", Boolean.FALSE);

			}
			
			//PLTU-CCLI-END
			if(SysParamConstant.DATA_LOCKER_PILOT_ENABLE){
				boolean isWhiteListed = getSecurityService().isWhiteListUser(customerVO.getUserId(), customerVO.getCustomerEBID(), CommonConstant.PILOT_FUNCD_DATALOCKER);
				if(isWhiteListed){
					session.setAttribute("isDataLockerEnabled", "Y");
				}else{
					session.setAttribute("isDataLockerEnabled", "N");
				}
			}else{
				session.setAttribute("isDataLockerEnabled", "Y");
			}

try{
				// CHECKING WHETHER C2C FUNCTION IS ENABLED
				if(SysParamConstant.CBC2C_FUNC_ENABLE){
					String customerLanguage = CommonUtils.getContextLanguage();
					// GETTING LANG CONFIG
					boolean isCBC2CLangEnabled = false;
					if (customerLanguage.equalsIgnoreCase(CommonConstant.LANG_EN)) {
						isCBC2CLangEnabled = SysParamConstant.CBC2C_ENBL_FLAG_EN;
					} else if (customerLanguage.equalsIgnoreCase(CommonConstant.LANG_SIMPLIFIED_CHINESE)) {
						isCBC2CLangEnabled = SysParamConstant.CBC2C_ENBL_FLAG_ZH_CN;
					} else if (customerLanguage.equalsIgnoreCase(CommonConstant.LANG_TRADITIONAL_CHINESE)) {
						isCBC2CLangEnabled = SysParamConstant.CBC2C_ENBL_FLAG_ZH_HK;
					}
					logger.info("CBC2C Stacy Enabled for Language "+customerLanguage+"?: "+isCBC2CLangEnabled);

					// ENABLE C2C / BOT ONLY IF LANG CONFIG IS ENABLED
					if(isCBC2CLangEnabled){
						// PILOT CHECKING FOR CBC2C
						if(SysParamConstant.CBC2C_PILOT_ENABLE){
							boolean isWhiteListed = getSecurityService().isWhiteListUser(customerVO.getUserId(), customerVO.getCustomerEBID(), SysParamConstant.CAT_CLICK2CHAT);

							// ONLY FOR WHITELISTED CUSTOMER, SETTING isC2CFloaterEnable VALUE TO TRUE. ELSE, DEFAULT VALUE(false) WILL BE AVAILABLE
							if(isWhiteListed){
								isC2CFloaterEnable = true;
								c2cCustomerSegment = CommonConstant.STACY_CONFIG_BOT;
								logger.info("CBC2C Stacy Enabled for "+customerVO.getUserId());
								boolean c2cSkipLBUnreadCall = SysParamConstant.IS_CLICK2CHAT_UNREAD_SKIP;
								session.setAttribute("c2cUnreadCallSkip", c2cSkipLBUnreadCall);
							}
						} else {
							// IF CBC2C FUNCTION ENABLED BUT PILOT FLAG IS DISABLED, SETTING isC2CFloaterEnable VALUE TO TRUE. ELSE, DEFAULT VALUE(false) WILL BE AVAILABLE
							isC2CFloaterEnable = true;
							c2cCustomerSegment = CommonConstant.STACY_CONFIG_BOT;
							logger.info("CBC2C Stacy Enabled for "+customerVO.getUserId());
							boolean c2cSkipLBUnreadCall = SysParamConstant.IS_CLICK2CHAT_UNREAD_SKIP;
							session.setAttribute("c2cUnreadCallSkip", c2cSkipLBUnreadCall);
						}
					}
				}
			} catch(Exception exception){
				logger.error("Exception in Setting CBC2C Info: "+exception.getMessage());
			} finally{
				session.setAttribute("isC2CFloaterEnable", Boolean.valueOf(isC2CFloaterEnable));
				session.setAttribute("c2cCustomerSegment", c2cCustomerSegment);
				session.setAttribute("c2cLoginFlag", Boolean.TRUE);
			}



4 Different if clauses are required test coverage all are part of method 
public ModelAndView doViewLanding(HttpServletRequest request, HttpServletResponse response) throws Exception required testcoverage
		
