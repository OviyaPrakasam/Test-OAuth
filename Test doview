public  ModelAndView doBannerSSOAuth(HttpServletRequest request, HttpServletResponse response) throws Exception {
		HttpSession session = request.getSession(false);
		String ssoCode=null;

		if(session != null && session.getAttribute(CONST_SMM_JSON_CONFIG) !=null){
			SMMUIResponseVO smmuiResponseVO = (SMMUIResponseVO) session.getAttribute(CONST_SMM_JSON_CONFIG);
			try {
				logger.info("Customer "+smmuiResponseVO.getCustRelId()+" clicked on SMM Banner");
				ssoCode = customerBO.generateSMMSSOCode(smmuiResponseVO.getCustRelId(),smmuiResponseVO.getSmmRADataVO());
			}catch (Exception e) {
				logger.error("SMM Banner Warning :Unable to fetch SMM Primary Banner CASAS SSO Code--"+e.getMessage());
			}
		}else if (session !=null && session.getAttribute("smmTempObj") !=null)  {
			//These are fallback blocks in case if above session value is empty...Just observed sometimes above is null..
			logger.error("SMM Banner :Inside main else session null");

			SMMUIResponseVO smmuiResponseVO = (SMMUIResponseVO) session.getAttribute("smmTempObj");
			logger.info("Customer "+smmuiResponseVO.getCustRelId()+" clicked on SMM Banner");
			try {
				ssoCode = customerBO.generateSMMSSOCode(smmuiResponseVO.getCustRelId(),smmuiResponseVO.getSmmRADataVO());
			}catch (Exception e) {
				logger.error("SMM Banner Warning :Unable to fetch SMM Primary Banner CASAS SSO Code--"+e.getMessage());
			}
		} else if(session != null &&  session.getAttribute("icmProfileId")!=null){
			String icmProfileId=(String)session.getAttribute("icmProfileId");
			try {
				logger.info("Customer "+icmProfileId+" clicked on SMM Banner");
				ssoCode = customerBO.generateSMMSSOCode(icmProfileId);
			}catch (Exception e) {
				logger.error("SMM Banner Warning :Unable to fetch SMM Primary Banner CASAS SSO Code--"+e.getMessage());
			}
		}
		response.setContentType("application/json");
		response.setCharacterEncoding("UTF-8");
		if (StringUtils.isNotBlank(ssoCode)) {
			response.getWriter().write(ssoCode);
		}else {
			logger.error("SMM Banner Warning:SSOCode value is empty or null");
			response.getWriter().write("error");
		}
		return null;
	}


	@Test
	public void doBannerSSOAuth() throws Exception {
		when(httpSessionMock.getAttribute("icmProfileId")).thenReturn("223232323");
		when(requestMock.getParameter("placement")).thenReturn("POST_LOGIN_SLOT");
		when(customerBO.generateSMMSSOCode(anyString())).thenReturn("898989-89898-8998");
		landingPageController.doBannerSSOAuth(requestMock, responseMock);
	}


@Test
public void testDoBannerSSOAuth_validToken() {
    String result = authService.doBannerSSOAuth("valid-token");
    assertEquals("UserAuthenticated", result);
}

@Test
public void testDoBannerSSOAuth_invalidToken() {
    String result = authService.doBannerSSOAuth("invalid-token");
    assertEquals("AuthenticationFailed", result);
}

@RunWith(MockitoJUnitRunner.class)
public class YourControllerTest {

    @InjectMocks
    private YourController controller;

    @Mock
    private HttpServletRequest request;

    @Mock
    private HttpServletResponse response;

    @Mock
    private HttpSession session;

    @Mock
    private CustomerBO customerBO;

    @Mock
    private PrintWriter writer;

    @Test
    public void testWithSMMJsonConfig() throws Exception {
        SMMUIResponseVO smmuiResponseVO = mock(SMMUIResponseVO.class);
        when(smmuiResponseVO.getCustRelId()).thenReturn("123");
        when(smmuiResponseVO.getSmmRADataVO()).thenReturn(new Object());

        when(request.getSession(false)).thenReturn(session);
        when(session.getAttribute("CONST_SMM_JSON_CONFIG")).thenReturn(smmuiResponseVO);
        when(customerBO.generateSMMSSOCode(anyString(), any())).thenReturn("SSOCODE123");
        when(response.getWriter()).thenReturn(writer);

        controller.doBannerSSOAuth(request, response);

        verify(writer).write("SSOCODE123");
    }

    @Test
    public void testWithIcmProfileIdOnly() throws Exception {
        when(request.getSession(false)).thenReturn(session);
        when(session.getAttribute("CONST_SMM_JSON_CONFIG")).thenReturn(null);
        when(session.getAttribute("smmTempObj")).thenReturn(null);
        when(session.getAttribute("icmProfileId")).thenReturn("ICM123");
        when(customerBO.generateSMMSSOCode("ICM123")).thenReturn("SSOCODE999");
        when(response.getWriter()).thenReturn(writer);

        controller.doBannerSSOAuth(request, response);

        verify(writer).write("SSOCODE999");
    }
}


@Test
	public void testWithSMMJsonConfig() throws Exception {
		SMMUIResponseVO smmuiResponseVO = mock(SMMUIResponseVO.class);
		when(smmuiResponseVO.getCustRelId()).thenReturn("123");
		when(smmuiResponseVO.getSmmRADataVO()).thenReturn(new SmmRADataVO());

		when(requestMock.getSession(false)).thenReturn(httpSessionMock);
		when(httpSessionMock.getAttribute("CONST_SMM_JSON_CONFIG")).thenReturn(smmuiResponseVO);
		when(customerBO.generateSMMSSOCode(anyString(), any())).thenReturn("SSOCODE123");

		StringWriter stringWriter = new StringWriter();
		PrintWriter writer = new PrintWriter(stringWriter);
		when(responseMock.getWriter()).thenReturn(writer);
		landingPageController.doBannerSSOAuth(requestMock, responseMock);
		//writer.flush();
		assertEquals("SSOCODE123", stringWriter.toString());
	}

	@Test
	public void testWithIcmProfileIdOnly() throws Exception {
		when(requestMock.getSession(false)).thenReturn(httpSessionMock);
		when(httpSessionMock.getAttribute("CONST_SMM_JSON_CONFIG")).thenReturn(null);
		when(httpSessionMock.getAttribute("smmTempObj")).thenReturn(null);
		when(httpSessionMock.getAttribute("icmProfileId")).thenReturn("ICM123");
		when(customerBO.generateSMMSSOCode("ICM123")).thenReturn("SSOCODE999");
		StringWriter stringWriter = new StringWriter();
		PrintWriter writer = new PrintWriter(stringWriter);
		when(responseMock.getWriter()).thenReturn(writer);
		landingPageController.doBannerSSOAuth(requestMock, responseMock);
		verify(writer).write("SSOCODE999");
	}
