import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Method;
import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class YourClassTest {

    @InjectMocks
    private YourClass yourClass;

    @Mock
    private CardBO cardBO;

    @Mock
    private CustomerBO customerBO;

    @Mock
    private Logger logger;

    private CustomerVO customerVO;

    @BeforeEach
    void setUp() {
        customerVO = new CustomerVO();
        customerVO.setUserId("user123");
    }

    @Test
    void testGetCCActivationFlag_withValidData_shouldReturnTrue() throws Exception {
        // Arrange
        CardVO cardVO = new CardVO();
        cardVO.setAccountNumber("1234567890");
        List<CardVO> cardList = new ArrayList<>();
        cardList.add(cardVO);

        CardSummaryVO cardSummaryVO = new CardSummaryVO();
        cardSummaryVO.setCardList(cardList);

        BannerDisplayCounterVO bannerVO = new BannerDisplayCounterVO();
        bannerVO.setCardNumber("1234567890");
        bannerVO.setCounter(0);
        List<BannerDisplayCounterVO> bannerList = new ArrayList<>();
        bannerList.add(bannerVO);

        when(cardBO.getCardSummary(any(CustomerVO.class))).thenReturn(cardSummaryVO);
        when(customerBO.getBannerCounterList(anyString(), anyString())).thenReturn(bannerList);

        // Act
        Method method = YourClass.class.getDeclaredMethod("getCCActivationFlag", CustomerVO.class, boolean.class);
        method.setAccessible(true);
        boolean result = (boolean) method.invoke(yourClass, customerVO, false);

        // Assert
        assertTrue(result);
    }

    @Test
    void testGetCCActivationFlag_withMaxCounter_shouldReturnFalse() throws Exception {
        // Arrange
        CardVO cardVO = new CardVO();
        cardVO.setAccountNumber("1234567890");
        List<CardVO> cardList = new ArrayList<>();
        cardList.add(cardVO);

        CardSummaryVO cardSummaryVO = new CardSummaryVO();
        cardSummaryVO.setCardList(cardList);

        BannerDisplayCounterVO bannerVO = new BannerDisplayCounterVO();
        bannerVO.setCardNumber("1234567890");
        bannerVO.setCounter(SysParamConstant.CREDIT_CARD_ACTIVATION_MAX_DISPLAY_COUNTER);
        List<BannerDisplayCounterVO> bannerList = new ArrayList<>();
        bannerList.add(bannerVO);

        when(cardBO.getCardSummary(any(CustomerVO.class))).thenReturn(cardSummaryVO);
        when(customerBO.getBannerCounterList(anyString(), anyString())).thenReturn(bannerList);

        // Act
        Method method = YourClass.class.getDeclaredMethod("getCCActivationFlag", CustomerVO.class, boolean.class);
        method.setAccessible(true);
        boolean result = (boolean) method.invoke(yourClass, customerVO, false);

        // Assert
        assertFalse(result);
    }

    @Test
    void testGetCCActivationFlag_withEmptyCardList_shouldReturnFalse() throws Exception {
        // Arrange
        CardSummaryVO cardSummaryVO = new CardSummaryVO();
        cardSummaryVO.setCardList(new ArrayList<>());

        when(cardBO.getCardSummary(any(CustomerVO.class))).thenReturn(cardSummaryVO);
        when(customerBO.getBannerCounterList(anyString(), anyString())).thenReturn(new ArrayList<>());

        // Act
        Method method = YourClass.class.getDeclaredMethod("getCCActivationFlag", CustomerVO.class, boolean.class);
        method.setAccessible(true);
        boolean result = (boolean) method.invoke(yourClass, customerVO, false);

        // Assert
        assertFalse(result);
    }

    @Test
    void testGetCCActivationFlag_withException_shouldReturnFalse() throws Exception {
        // Arrange
        when(cardBO.getCardSummary(any(CustomerVO.class))).thenThrow(new RuntimeException("Kong/CCMS failure"));

        // Act
        Method method = YourClass.class.getDeclaredMethod("getCCActivationFlag", CustomerVO.class, boolean.class);
        method.setAccessible(true);
        boolean result = (boolean) method.invoke(yourClass, customerVO, false);

        // Assert
        assertFalse(result);
    }
}
