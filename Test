import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.mockito.junit.jupiter.MockitoExtension;

import java.lang.reflect.Method;
import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class YourClassTest {

    @InjectMocks
    private YourClass yourClass;

    @Mock
    private CardBO cardBO;

    @Mock
    private CustomerBO customerBO;

    @Mock
    private Logger logger;

    private CustomerVO customerVO;

    @BeforeEach
    void setUp() {
        customerVO = new CustomerVO();
        customerVO.setUserId("user123");
    }

    @Test
    void testGetCCActivationFlag_withValidData_shouldReturnTrue() throws Exception {
        // Arrange
        CardVO cardVO = new CardVO();
        cardVO.setAccountNumber("1234567890");
        List<CardVO> cardList = new ArrayList<>();
        cardList.add(cardVO);

        CardSummaryVO cardSummaryVO = new CardSummaryVO();
        cardSummaryVO.setCardList(cardList);

        BannerDisplayCounterVO bannerVO = new BannerDisplayCounterVO();
        bannerVO.setCardNumber("1234567890");
        bannerVO.setCounter(0);
        List<BannerDisplayCounterVO> bannerList = new ArrayList<>();
        bannerList.add(bannerVO);

        when(cardBO.getCardSummary(any(CustomerVO.class))).thenReturn(cardSummaryVO);
        when(customerBO.getBannerCounterList(anyString(), anyString())).thenReturn(bannerList);

        // Act
        Method method = YourClass.class.getDeclaredMethod("getCCActivationFlag", CustomerVO.class, boolean.class);
        method.setAccessible(true);
        boolean result = (boolean) method.invoke(yourClass, customerVO, false);

        // Assert
        assertTrue(result);
    }

    @Test
    void testGetCCActivationFlag_withMaxCounter_shouldReturnFalse() throws Exception {
        // Arrange
        CardVO cardVO = new CardVO();
        cardVO.setAccountNumber("1234567890");
        List<CardVO> cardList = new ArrayList<>();
        cardList.add(cardVO);

        CardSummaryVO cardSummaryVO = new CardSummaryVO();
        cardSummaryVO.setCardList(cardList);

        BannerDisplayCounterVO bannerVO = new BannerDisplayCounterVO();
        bannerVO.setCardNumber("1234567890");
        bannerVO.setCounter(SysParamConstant.CREDIT_CARD_ACTIVATION_MAX_DISPLAY_COUNTER);
        List<BannerDisplayCounterVO> bannerList = new ArrayList<>();
        bannerList.add(bannerVO);

        when(cardBO.getCardSummary(any(CustomerVO.class))).thenReturn(cardSummaryVO);
        when(customerBO.getBannerCounterList(anyString(), anyString())).thenReturn(bannerList);

        // Act
        Method method = YourClass.class.getDeclaredMethod("getCCActivationFlag", CustomerVO.class, boolean.class);
        method.setAccessible(true);
        boolean result = (boolean) method.invoke(yourClass, customerVO, false);

        // Assert
        assertFalse(result);
    }

    @Test
    void testGetCCActivationFlag_withEmptyCardList_shouldReturnFalse() throws Exception {
        // Arrange
        CardSummaryVO cardSummaryVO = new CardSummaryVO();
        cardSummaryVO.setCardList(new ArrayList<>());

        when(cardBO.getCardSummary(any(CustomerVO.class))).thenReturn(cardSummaryVO);
        when(customerBO.getBannerCounterList(anyString(), anyString())).thenReturn(new ArrayList<>());

        // Act
        Method method = YourClass.class.getDeclaredMethod("getCCActivationFlag", CustomerVO.class, boolean.class);
        method.setAccessible(true);
        boolean result = (boolean) method.invoke(yourClass, customerVO, false);

        // Assert
        assertFalse(result);
    }

    @Test
    void testGetCCActivationFlag_withException_shouldReturnFalse() throws Exception {
        // Arrange
        when(cardBO.getCardSummary(any(CustomerVO.class))).thenThrow(new RuntimeException("Kong/CCMS failure"));

        // Act
        Method method = YourClass.class.getDeclaredMethod("getCCActivationFlag", CustomerVO.class, boolean.class);
        method.setAccessible(true);
        boolean result = (boolean) method.invoke(yourClass, customerVO, false);

        // Assert
        assertFalse(result);
    }
}

@Test
void testGetCCActivationFlag_withValidData_shouldReturnTrue() throws Exception {
    // Arrange
    YourClass yourClass = spy(new YourClass());  // Create spy

    CardVO cardVO = new CardVO();
    cardVO.setAccountNumber("1234567890");
    List<CardVO> cardList = new ArrayList<>();
    cardList.add(cardVO);

    CardSummaryVO cardSummaryVO = new CardSummaryVO();
    cardSummaryVO.setCardList(cardList);

    BannerDisplayCounterVO bannerVO = new BannerDisplayCounterVO();
    bannerVO.setCardNumber("1234567890");
    bannerVO.setCounter(0); // Ensure this is < SysParamConstant.CREDIT_CARD_ACTIVATION_MAX_DISPLAY_COUNTER
    List<BannerDisplayCounterVO> bannerList = new ArrayList<>();
    bannerList.add(bannerVO);

    // Mock dependencies
    CardBO cardBO = mock(CardBO.class);
    CustomerBO customerBO = mock(CustomerBO.class);
    when(cardBO.getCardSummary(any())).thenReturn(cardSummaryVO);
    when(customerBO.getBannerCounterList(any(), any())).thenReturn(bannerList);

    // Inject mocks into yourClass instance
    Field cardBOField = YourClass.class.getDeclaredField("cardBO");
    cardBOField.setAccessible(true);
    cardBOField.set(yourClass, cardBO);

    Field customerBOField = YourClass.class.getDeclaredField("customerBO");
    customerBOField.setAccessible(true);
    customerBOField.set(yourClass, customerBO);

    // Spy cardActivationFlagProcessing to return true
    doReturn(true).when(yourClass).cardActivationFlagProcessing(any(), any(), anyString());

    // Call the private method
    Method method = YourClass.class.getDeclaredMethod("getCCActivationFlag", CustomerVO.class, boolean.class);
    method.setAccessible(true);

    CustomerVO customerVO = new CustomerVO();
    customerVO.setUserId("user123");

    // Act
    boolean result = (boolean) method.invoke(yourClass, customerVO, false);

    // Assert
    assertTrue(result, "Expected banner flag to be true with valid data");
}

@Test
	public void testGetCCActivationFlag_withValidData_shouldReturnTrue() throws Exception {

		LandingPageController landingPageControllerSpy = PowerMockito.spy(new LandingPageController());  // Create spy

		CardVO cardVO = new CardVO();
		cardVO.setAccountNumber("1234567890");
		List<CardVO> cardList = new ArrayList<>();
		cardList.add(cardVO);

		CardSummaryVO cardSummaryVO = new CardSummaryVO();
		cardSummaryVO.setCardList(cardList);

		BannerDisplayCounterVO bannerVO = new BannerDisplayCounterVO();
		bannerVO.setCardNumber("1234567890");
		bannerVO.setCounter(0); // Ensure this is < SysParamConstant.CREDIT_CARD_ACTIVATION_MAX_DISPLAY_COUNTER
		List<BannerDisplayCounterVO> bannerList = new ArrayList<>();
		bannerList.add(bannerVO);

		CardBO cardBO = mock(CardBO.class);
		CustomerBO customerBO = mock(CustomerBO.class);
		when(cardBO.getCardSummary((List) any())).thenReturn(cardSummaryVO);
		when(customerBO.getBannerCounterList(any(), any())).thenReturn(bannerList);

		Field cardBOField = LandingPageController.class.getDeclaredField("cardBO");
		cardBOField.setAccessible(true);
		cardBOField.set(landingPageControllerSpy, cardBO);

		Field customerBOField = LandingPageController.class.getDeclaredField("customerBO");
		customerBOField.setAccessible(true);
		customerBOField.set(landingPageControllerSpy, customerBO);

		PowerMockito.doReturn(true).when(landingPageControllerSpy,"cardActivationFlagProcessing", any(), any(), anyString());
		Method method = LandingPageController.class.getDeclaredMethod("getCCActivationFlag", CustomerVO.class, boolean.class);
		method.setAccessible(true);
		CustomerVO customerVO = new CustomerVO();
		customerVO.setUserId("user123");
		boolean result = (boolean) method.invoke(landingPageControllerSpy, customerVO, false);
		assertTrue("Expected banner flag to be true with valid data", result);
	}


@Test
public void testGetCCActivationFlag_withValidData_shouldReturnTrue() throws Exception {
    // Prepare mocks
    CardBO cardBO = mock(CardBO.class);
    CustomerBO customerBO = mock(CustomerBO.class);

    // Prepare test data
    CardVO cardVO = new CardVO();
    cardVO.setAccountNumber("1234567890");
    List<CardVO> cardList = Collections.singletonList(cardVO);
    CardSummaryVO cardSummaryVO = new CardSummaryVO();
    cardSummaryVO.setCardList(cardList);

    BannerDisplayCounterVO bannerVO = new BannerDisplayCounterVO();
    bannerVO.setCardNumber("1234567890");
    bannerVO.setCounter(0);
    List<BannerDisplayCounterVO> bannerList = Collections.singletonList(bannerVO);

    when(cardBO.getCardSummary(anyList())).thenReturn(cardSummaryVO);
    when(customerBO.getBannerCounterList(any(), any())).thenReturn(bannerList);

    // Spy and inject dependencies
    LandingPageController landingPageControllerSpy = PowerMockito.spy(new LandingPageController());
    Field cardBOField = LandingPageController.class.getDeclaredField("cardBO");
    cardBOField.setAccessible(true);
    cardBOField.set(landingPageControllerSpy, cardBO);

    Field customerBOField = LandingPageController.class.getDeclaredField("customerBO");
    customerBOField.setAccessible(true);
    customerBOField.set(landingPageControllerSpy, customerBO);

    // Mock private method call
    PowerMockito.doReturn(true).when(landingPageControllerSpy, "cardActivationFlagProcessing", any(), any(), anyString());

    // Invoke method and assert result
    Method method = LandingPageController.class.getDeclaredMethod("getCCActivationFlag", CustomerVO.class, boolean.class);
    method.setAccessible(true);
    CustomerVO customerVO = new CustomerVO();
    customerVO.setUserId("user123");

    boolean result = (boolean) method.invoke(landingPageControllerSpy, customerVO, false);
    assertTrue("Expected banner flag to be true with valid data", result);
}
